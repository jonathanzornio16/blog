I feel like I've learned a lot more today than I initially expected to.  After reviewing some interface tutorials, I managed to complete the Rollong a Ball project. located at https://unity3d.com/learn/tutorials/projects/roll-ball-tutorial

Although the product produced was very simple, actually running through the motions of creating a game gave me a much better idea of how many features of the program work, including rigid bodies which allow for physics simulations, materials that allow for coloring or texturing objects, and prefabs, which allow for the generation of identical objects within a game.

I also got my first chance to script in C#, and founnd that my extremely basic knowledge of the syntax was sufficient for following the tutorial.  Additionally, there is an extensive document with all of the unity specific functions, and hitting control + ' allows for research in a way very similar to writing a ? and then hitting tab in SageMath.

With some help, I was able to write this script, which controlled the player as well as the user interface text that appears, displaying how many of the rotating cubes that have been collected.


using UnityEngine;
using UnityEngine.UI;
using System.Collections;

public class PlayerController : MonoBehaviour {

	public float speed;
	public Text countText;
	public Text winText;

	private Rigidbody rb;
	private int count;

	// Use this for initialization
	void Start () 
	{
		rb = GetComponent<Rigidbody> ();
		count = 0;
		SetCountText ();
		winText.text = "";
	}
	
	// Update is called once per frame
	void Update () {
	
	}

	void FixedUpdate () 
	{
		float moveHorizontal = Input.GetAxis ("Horizontal");
		float moveVertical = Input.GetAxis ("Vertical");

		Vector3 movement = new Vector3 (moveHorizontal, 0.0f, moveVertical);

		rb.AddForce (movement * speed);
	}

	void OnTriggerEnter(Collider other)
	{
		if (other.gameObject.CompareTag ("Pick Up")) 
		{
			other.gameObject.SetActive (false);
			count += 1;
			SetCountText ();
		}
	}

	void SetCountText ()
	{
		countText.text = "Count: " + count.ToString ();
		if (count >= 8) 
		{
			winText.text = "You Win!";
		}
	}
}

After completing the project, I looked into some of the tutorials explaiining the concets of the physics engine, mostly as a review.  There were a few options not covered in the Roll a Ball project though, such as the ability to prevent rotation in certain axes.

Overall, Unity is more physics-based than I anticipated, but there will probably still be a good amount of time spent figuring out the coding.  The project definitely feels much more doable after dippping my feet in and actually creating something with Unity.
